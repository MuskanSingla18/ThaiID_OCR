{"ast":null,"code":"var _jsxFileName = \"/Users/muskansingla/Desktop/Qoala/client/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\n// client/src/components/FileUpload.js\nimport React, { useState, useRef } from 'react';\nimport './FileUpload.css';\nimport axios from 'axios';\nimport uploadImage from './upload.png';\n//import dotenv from 'dotenv';\n\n//dotenv.config();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUpload\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const hiddenFileInput = useRef(null); // ADDED\n\n  const handleClick = event => {\n    hiddenFileInput.current.click(); // ADDED\n  };\n  const handleUpload = async () => {\n    if (file) {\n      // Read the file and encode it to base64\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64Data = reader.result.split(',')[1];\n        console.log(base64Data);\n        // Call the Google Cloud Vision API for OCR\n        const apiKey = 'AIzaSyDomoRZT6ZWL6Z7-TOxf7hBPCqznRQOYUI';\n        const apiUrl = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;\n        const requestBody = {\n          requests: [{\n            image: {\n              content: base64Data\n            },\n            features: [{\n              type: 'DOCUMENT_TEXT_DETECTION'\n            }],\n            imageContext: {\n              languageHints: ['en', 'th']\n            }\n          }]\n        };\n        try {\n          var _result$responses$, _result$responses$$fu;\n          const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestBody)\n          });\n          const result = await response.json();\n          console.log('OCR Result:', result);\n\n          // Extract OCR text from the result and call the onUpload function\n          const ocrText = ((_result$responses$ = result.responses[0]) === null || _result$responses$ === void 0 ? void 0 : (_result$responses$$fu = _result$responses$.fullTextAnnotation) === null || _result$responses$$fu === void 0 ? void 0 : _result$responses$$fu.text) || '';\n          onUpload({\n            ...file,\n            ocrText\n          });\n        } catch (error) {\n          console.error('Error performing OCR with Google Cloud Vision API:', error);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"upload-btn-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Upload Your ID Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn\",\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"image\",\n          src: uploadImage,\n          alt: \"Upload a file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".png, .jpg, .pdf\",\n      onChange: handleFileChange,\n      class: \"file-input\",\n      ref: hiddenFileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"upload-btn-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn\",\n        onClick: handleUpload,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"Cuf+jacYDJrDV2hTOHiZNk8Lm6k=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useRef","axios","uploadImage","jsxDEV","_jsxDEV","FileUpload","onUpload","_s","file","setFile","handleFileChange","e","target","files","hiddenFileInput","handleClick","event","current","click","handleUpload","reader","FileReader","onload","base64Data","result","split","console","log","apiKey","apiUrl","requestBody","requests","image","content","features","type","imageContext","languageHints","_result$responses$","_result$responses$$fu","response","fetch","method","headers","body","JSON","stringify","json","ocrText","responses","fullTextAnnotation","text","error","readAsDataURL","class","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","accept","onChange","ref","_c","$RefreshReg$"],"sources":["/Users/muskansingla/Desktop/Qoala/client/src/components/FileUpload.js"],"sourcesContent":["// client/src/components/FileUpload.js\nimport React, { useState,useRef } from 'react';\nimport './FileUpload.css';\nimport axios from 'axios';\nimport uploadImage from './upload.png';\n//import dotenv from 'dotenv';\n\n//dotenv.config();\n\nconst FileUpload = ({ onUpload }) => {\n  \n  const [file, setFile] = useState(null);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const hiddenFileInput = useRef(null); // ADDED\n\n  const handleClick = event => {\n    hiddenFileInput.current.click();    // ADDED\n  };\n\n  const handleUpload = async () => {\n    if (file) {\n      // Read the file and encode it to base64\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64Data = reader.result.split(',')[1];\n        console.log(base64Data);\n        // Call the Google Cloud Vision API for OCR\n        const apiKey = 'AIzaSyDomoRZT6ZWL6Z7-TOxf7hBPCqznRQOYUI';\n        const apiUrl = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;\n\n        const requestBody = {\n          requests: [\n            {\n              image: {\n                content: base64Data,\n              },\n              features: [\n                {\n                  type: 'DOCUMENT_TEXT_DETECTION',\n                },\n              ],\n              imageContext: {\n                languageHints: ['en', 'th'],\n              },\n            },\n          ],\n        };\n\n        try {\n          const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n          });\n\n          const result = await response.json();\n          console.log('OCR Result:', result);\n\n          // Extract OCR text from the result and call the onUpload function\n          const ocrText = result.responses[0]?.fullTextAnnotation?.text || '';\n          onUpload({ ...file, ocrText });\n        } catch (error) {\n          console.error('Error performing OCR with Google Cloud Vision API:', error);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    }\n  };\n\n\n  return (\n    <div class=\"upload-container\">\n      <div class=\"upload-btn-wrapper\">\n        <h3>Upload Your ID Card</h3>\n      <button class=\"btn\" onClick={handleClick}>\n        <img class=\"image\" src={uploadImage} alt=\"Upload a file\"/>\n      </button>\n      </div>\n      <input type=\"file\" accept=\".png, .jpg, .pdf\" onChange={handleFileChange} class=\"file-input\" ref={hiddenFileInput}/>\n      <div class = \"upload-btn-wrapper\">\n      <button class = \"btn\" onClick={handleUpload}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\n\nexport default FileUpload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}