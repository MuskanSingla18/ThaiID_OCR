{"ast":null,"code":"const handleUpload = async () => {\n  if (file) {\n    console.log('File selected:', file);\n\n    // Read the file and encode it to base64\n    const reader = new FileReader();\n    reader.onload = async () => {\n      const base64Data = reader.result.split(',')[1];\n      console.log('Base64 data:', base64Data);\n\n      // Call the Google Cloud Vision API for OCR\n      const apiKey = 'YOUR_GOOGLE_CLOUD_VISION_API_KEY'; // Replace with your actual API key\n      const apiUrl = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;\n      const requestBody = {\n        requests: [{\n          image: {\n            content: base64Data\n          },\n          features: [{\n            type: 'TEXT_DETECTION'\n          }]\n        }]\n      };\n      try {\n        var _result$responses$, _result$responses$$fu;\n        console.log('Calling Google Cloud Vision API...');\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        const result = await response.json();\n        console.log('OCR Result:', result);\n\n        // Extract OCR text from the result and call the onUpload function\n        const ocrText = ((_result$responses$ = result.responses[0]) === null || _result$responses$ === void 0 ? void 0 : (_result$responses$$fu = _result$responses$.fullTextAnnotation) === null || _result$responses$$fu === void 0 ? void 0 : _result$responses$$fu.text) || '';\n        console.log('Extracted OCR Text:', ocrText);\n        onUpload({\n          ...file,\n          ocrText\n        });\n      } catch (error) {\n        console.error('Error performing OCR with Google Cloud Vision API:', error);\n      }\n    };\n    reader.readAsDataURL(file);\n  }\n};","map":{"version":3,"names":["handleUpload","file","console","log","reader","FileReader","onload","base64Data","result","split","apiKey","apiUrl","requestBody","requests","image","content","features","type","_result$responses$","_result$responses$$fu","response","fetch","method","headers","body","JSON","stringify","json","ocrText","responses","fullTextAnnotation","text","onUpload","error","readAsDataURL"],"sources":["/Users/muskansingla/Desktop/Qoala/client/src/components/FileUpload.js"],"sourcesContent":["const handleUpload = async () => {\n  if (file) {\n    console.log('File selected:', file);\n\n    // Read the file and encode it to base64\n    const reader = new FileReader();\n    reader.onload = async () => {\n      const base64Data = reader.result.split(',')[1];\n      console.log('Base64 data:', base64Data);\n\n      // Call the Google Cloud Vision API for OCR\n      const apiKey = 'YOUR_GOOGLE_CLOUD_VISION_API_KEY'; // Replace with your actual API key\n      const apiUrl = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;\n\n      const requestBody = {\n        requests: [\n          {\n            image: {\n              content: base64Data,\n            },\n            features: [\n              {\n                type: 'TEXT_DETECTION',\n              },\n            ],\n          },\n        ],\n      };\n\n      try {\n        console.log('Calling Google Cloud Vision API...');\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        });\n\n        const result = await response.json();\n        console.log('OCR Result:', result);\n\n        // Extract OCR text from the result and call the onUpload function\n        const ocrText = result.responses[0]?.fullTextAnnotation?.text || '';\n        console.log('Extracted OCR Text:', ocrText);\n        onUpload({ ...file, ocrText });\n      } catch (error) {\n        console.error('Error performing OCR with Google Cloud Vision API:', error);\n      }\n    };\n\n    reader.readAsDataURL(file);\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAIC,IAAI,EAAE;IACRC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;;IAEnC;IACA,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,YAAY;MAC1B,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEI,UAAU,CAAC;;MAEvC;MACA,MAAMG,MAAM,GAAG,kCAAkC,CAAC,CAAC;MACnD,MAAMC,MAAM,GAAG,uDAAuD,GAAGD,MAAM;MAE/E,MAAME,WAAW,GAAG;QAClBC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE;YACLC,OAAO,EAAER;UACX,CAAC;UACDS,QAAQ,EAAE,CACR;YACEC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC;MAEL,CAAC;MAED,IAAI;QAAA,IAAAC,kBAAA,EAAAC,qBAAA;QACFjB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjD,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAACV,MAAM,EAAE;UACnCW,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,WAAW;QAClC,CAAC,CAAC;QAEF,MAAMJ,MAAM,GAAG,MAAMY,QAAQ,CAACO,IAAI,CAAC,CAAC;QACpCzB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEK,MAAM,CAAC;;QAElC;QACA,MAAMoB,OAAO,GAAG,EAAAV,kBAAA,GAAAV,MAAM,CAACqB,SAAS,CAAC,CAAC,CAAC,cAAAX,kBAAA,wBAAAC,qBAAA,GAAnBD,kBAAA,CAAqBY,kBAAkB,cAAAX,qBAAA,uBAAvCA,qBAAA,CAAyCY,IAAI,KAAI,EAAE;QACnE7B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEyB,OAAO,CAAC;QAC3CI,QAAQ,CAAC;UAAE,GAAG/B,IAAI;UAAE2B;QAAQ,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd/B,OAAO,CAAC+B,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;MAC5E;IACF,CAAC;IAED7B,MAAM,CAAC8B,aAAa,CAACjC,IAAI,CAAC;EAC5B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}