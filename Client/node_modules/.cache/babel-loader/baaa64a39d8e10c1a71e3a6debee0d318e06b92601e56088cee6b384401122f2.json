{"ast":null,"code":"var _jsxFileName = \"/Users/muskansingla/Desktop/Qoala/client/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\n// client/src/components/FileUpload.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUpload\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (file) {\n      // Read the file and encode it to base64\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64Data = reader.result.split(',')[1];\n\n        // Call the Google Cloud Vision API for OCR\n        const apiKey = 'AIzaSyDomoRZT6ZWL6Z7-TOxf7hBPCqznRQOYUI';\n        const apiUrl = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;\n        const requestBody = {\n          requests: [{\n            image: {\n              content: base64Data\n            },\n            features: [{\n              type: 'TEXT_DETECTION'\n            }]\n          }]\n        };\n        try {\n          var _result$responses$, _result$responses$$fu;\n          const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestBody)\n          });\n          const result = await response.json();\n          console.log('OCR Result:', result);\n\n          // Extract OCR text from the result and call the onUpload function\n          const ocrText = ((_result$responses$ = result.responses[0]) === null || _result$responses$ === void 0 ? void 0 : (_result$responses$$fu = _result$responses$.fullTextAnnotation) === null || _result$responses$$fu === void 0 ? void 0 : _result$responses$$fu.text) || '';\n          onUpload({\n            ...file,\n            ocrText\n          });\n        } catch (error) {\n          console.error('Error performing OCR with Google Cloud Vision API:', error);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".png, .jpg, .pdf\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","onUpload","_s","file","setFile","handleFileChange","e","target","files","handleUpload","reader","FileReader","onload","base64Data","result","split","apiKey","apiUrl","requestBody","requests","image","content","features","type","_result$responses$","_result$responses$$fu","response","fetch","method","headers","body","JSON","stringify","json","console","log","ocrText","responses","fullTextAnnotation","text","error","readAsDataURL","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/muskansingla/Desktop/Qoala/client/src/components/FileUpload.js"],"sourcesContent":["// client/src/components/FileUpload.js\nimport React, { useState } from 'react';\n\nconst FileUpload = ({ onUpload }) => {\n  const [file, setFile] = useState(null);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    if (file) {\n      // Read the file and encode it to base64\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64Data = reader.result.split(',')[1];\n\n        // Call the Google Cloud Vision API for OCR\n        const apiKey = 'AIzaSyDomoRZT6ZWL6Z7-TOxf7hBPCqznRQOYUI';\n        const apiUrl = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;\n\n        const requestBody = {\n          requests: [\n            {\n              image: {\n                content: base64Data,\n              },\n              features: [\n                {\n                  type: 'TEXT_DETECTION',\n                },\n              ],\n            },\n          ],\n        };\n\n        try {\n          const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n          });\n\n          const result = await response.json();\n          console.log('OCR Result:', result);\n\n          // Extract OCR text from the result and call the onUpload function\n          const ocrText = result.responses[0]?.fullTextAnnotation?.text || '';\n          onUpload({ ...file, ocrText });\n        } catch (error) {\n          console.error('Error performing OCR with Google Cloud Vision API:', error);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".png, .jpg, .pdf\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload</button>\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMQ,gBAAgB,GAAIC,CAAC,IAAK;IAC9BF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIN,IAAI,EAAE;MACR;MACA,MAAMO,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,YAAY;QAC1B,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;QAE9C;QACA,MAAMC,MAAM,GAAG,yCAAyC;QACxD,MAAMC,MAAM,GAAG,uDAAuD,GAAGD,MAAM;QAE/E,MAAME,WAAW,GAAG;UAClBC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE;cACLC,OAAO,EAAER;YACX,CAAC;YACDS,QAAQ,EAAE,CACR;cACEC,IAAI,EAAE;YACR,CAAC;UAEL,CAAC;QAEL,CAAC;QAED,IAAI;UAAA,IAAAC,kBAAA,EAAAC,qBAAA;UACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,MAAM,EAAE;YACnCW,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,WAAW;UAClC,CAAC,CAAC;UAEF,MAAMJ,MAAM,GAAG,MAAMY,QAAQ,CAACO,IAAI,CAAC,CAAC;UACpCC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAErB,MAAM,CAAC;;UAElC;UACA,MAAMsB,OAAO,GAAG,EAAAZ,kBAAA,GAAAV,MAAM,CAACuB,SAAS,CAAC,CAAC,CAAC,cAAAb,kBAAA,wBAAAC,qBAAA,GAAnBD,kBAAA,CAAqBc,kBAAkB,cAAAb,qBAAA,uBAAvCA,qBAAA,CAAyCc,IAAI,KAAI,EAAE;UACnEtC,QAAQ,CAAC;YAAE,GAAGE,IAAI;YAAEiC;UAAQ,CAAC,CAAC;QAChC,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdN,OAAO,CAACM,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;QAC5E;MACF,CAAC;MAED9B,MAAM,CAAC+B,aAAa,CAACtC,IAAI,CAAC;IAC5B;EACF,CAAC;EAED,oBACEJ,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAOwB,IAAI,EAAC,MAAM;MAACoB,MAAM,EAAC,kBAAkB;MAACC,QAAQ,EAAEvC;IAAiB;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3EjD,OAAA;MAAQkD,OAAO,EAAExC,YAAa;MAAAiC,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAAC9C,EAAA,CA/DIF,UAAU;AAAAkD,EAAA,GAAVlD,UAAU;AAiEhB,eAAeA,UAAU;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}